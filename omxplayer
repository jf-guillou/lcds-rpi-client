#!/usr/bin/python

import os
import sys
import signal
import urllib
import urlparse
import subprocess
from threading import Timer

def getScreenDimensions():
  if not os.environ.has_key('SCREEN_WIDTH_PX') or not os.environ.has_key('SCREEN_HEIGHT_PX'):
    w, h = (int(v) for v in
      subprocess.Popen(
        'DISPLAY=:0 xrandr | grep "\*" | cut -d" " -f4',
        shell=True,
        stdout=subprocess.PIPE,
        stderr=file('/dev/null','wa')
      ).communicate()[0].strip().split('\n')[0].split('x')
    )
    return w, h
  else:
    return int(os.environ.get('SCREEN_WIDTH_PX')), int(os.environ.get('SCREEN_HEIGHT_PX'))

def kill(pid):
  try:
    os.system('pkill -TERM -P {pid}'.format(pid=pid))
  except OSError:
    pass # ignore kill failure

args = sys.argv
url = urlparse.urlparse(args[-1])
frag = url.fragment

params = {}
query = frag.split(';')

for param in query:
  if not param.startswith('_'):
    continue
  key = param
  value = ''
  if '=' in param:
    key, value = param.split('=')
  params[key[1:]] = value

url = url._replace(fragment='')
args[-1] = url.geturl()

timeout = 0
for (key, value) in params.items():
  if key == 'win':
    x1, y1, x2, y2 = (float(v) for v in value.split(','))
    w, h = getScreenDimensions()
    value = ','.join(str(int(round(v))) for v in [x1*w, y1*h, x2*w, y2*h])
  if key == 'duration':
    timeout = int(value)
    continue

  if value is '':
    args.insert(1, '--'+key)
  else:
    args.insert(1, '--'+key+'='+value)

args[0] = '/usr/bin/omxplayer'
p = subprocess.Popen(args)
if timeout > 0:
  t = Timer(timeout, kill, [p.pid])
  t.start()
  p.wait()
  t.cancel()
else:
  p.wait()
